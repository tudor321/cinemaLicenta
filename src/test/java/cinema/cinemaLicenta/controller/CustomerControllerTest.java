package cinema.cinemaLicenta.controller;

import cinema.cinemaLicenta.dto.CustomerDTO;
import cinema.cinemaLicenta.entity.Customer;
import cinema.cinemaLicenta.services.CustomerService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import java.util.Arrays;
import java.util.List;
import java.util.Optional;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.*;

class CustomerControllerTest {
    @Mock
    private CustomerService customerService;

    @InjectMocks
    private CustomerController customerController;

    // Add this method for mapping CustomerDTO to Customer
    private Customer mapCustomerDTOToEntity(CustomerDTO customerDTO) {
        return Customer.builder()
                .id(null) // Assuming the ID will be generated by the service
                .customer_first(customerDTO.getCustomer_first())
                .customer_last(customerDTO.getCustomer_last())
                .email(customerDTO.getEmail())
                .phone(customerDTO.getPhone())
                .build();
    }

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }


    @Test
    public void testAddCustomers() {
        CustomerDTO customerDTO = new CustomerDTO();
        // Set properties of cityDTO

        CustomerDTO expectedResult = new CustomerDTO();
        // Set expected result properties

        when(customerService.addCustomer(customerDTO)).thenReturn(expectedResult);

        ResponseEntity<CustomerDTO> response = customerController.addCustomers(customerDTO);

        assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK);
        assertThat(response.getBody()).isEqualTo(expectedResult);
    }

    private CustomerDTO convertToCustomerDTO(Customer customer) {
        CustomerDTO customerDTO = new CustomerDTO();
        customerDTO.setId(customer.getId());
        customerDTO.setCustomer_first(customer.getCustomer_first());
        customerDTO.setCustomer_last(customer.getCustomer_last());
        customerDTO.setEmail(customer.getEmail());
        customerDTO.setPhone(customer.getPhone());
        return customerDTO;
    }


    @Test
    public void testGetOneCustomer() {
        // Test data
        Long customerId = 1L;
        Customer customer = Customer.builder()
                .id(customerId)
                .customer_first("John")
                .customer_last("Doe")
                .email("john.doe@example.com")
                .phone("123456789")
                .build();

        // Mock the service method
        when(customerService.getCustomer(customerId)).thenReturn(Optional.of(customer));

        // Perform the request
        ResponseEntity<Optional<Customer>> response = customerController.getOneCustomer(customerId);

        // Assertions
        assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK);
        assertThat(response.getBody().orElse(null)).isEqualTo(customer);

        verify(customerService, times(1)).getCustomer(customerId);
    }

    @Test
    public void testGetAllCustomer() {
        // Test data
        Customer customer1 = Customer.builder()
                .id(1L)
                .customer_first("John")
                .customer_last("Doe")
                .email("john.doe@example.com")
                .phone("123456789")
                .build();

        Customer customer2 = Customer.builder()
                .id(2L)
                .customer_first("Jane")
                .customer_last("Smith")
                .email("jane.smith@example.com")
                .phone("987654321")
                .build();

        List<Customer> customers = Arrays.asList(customer1, customer2);

        // Mock the service method
        when(customerService.getAllCustomers()).thenReturn(customers);

        // Perform the request
        ResponseEntity<List<Customer>> response = customerController.getAllCustomer();

        // Assertions
        assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK);
        assertThat(response.getBody()).isEqualTo(customers);

        verify(customerService, times(1)).getAllCustomers();
    }

    @Test
    public void testUpdateACustomer() {
        // Test data
        Long customerId = 1L;
        String customer_first = "John";
        String customer_last = "Doe";
        String phone = "123456789";
        String email = "john.doe@example.com";

        // Mock the service method
        when(customerService.updateCustomer(customerId, customer_first, customer_last, phone, email)).thenReturn(null);

        // Perform the request
        ResponseEntity<CustomerDTO> response = customerController.updateACustomer(customerId, customer_first, customer_last, phone, email);

        // Assertions
        assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK);
        assertThat(response.getBody()).isNull();

        verify(customerService, times(1)).updateCustomer(customerId, customer_first, customer_last, phone, email);
    }

    @Test
    public void testDeleteCustomer() {
        Long customerId = 1L;
        String expectedResponse = String.format("Customer %d was deleted", customerId);

        // Perform the request
        ResponseEntity<String> response = customerController.deleteCustomer(customerId);

        // Assertions
        assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK);
        assertThat(response.getBody()).isEqualTo(expectedResponse);

        verify(customerService, times(1)).delete(customerId);
    }
}
